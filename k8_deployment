---
apiVersion: v1
kind: Service
metadata:
  name: tomcat-service-devops
  namespace: tomcat-namespace-devops
spec:
  type: NodePort
  selector:
    app: tomcat
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
      nodePort: 32227
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcat-deployment-devops
  namespace: tomcat-namespace-devops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tomcat
  template:
    metadata:
      labels:
        app: tomcat
    spec:
      containers:
        - name: tomcat-container-devops
          image: gcr.io/kodekloud/centos-ssh-enabled:tomcat
          ports:
            - containerPort: 8080


kubectl create namespace tomcat-namespace-devops
kubectl get deploy -n tomcat-namespace-devops
kubectl get service -n tomcat-namespace-devops
kubectl get pod -n tomcat-namespace-devops
kubectl exec pod-ID -n tomcat-namespace-devops -- curl http://localhost:8080

## create deployment and update Rollout
---
apiVersion: v1
kind: Service
metadata:
  name: httpd-service
  namespace: nautilus
spec:
  selector:
    app: httpd
  type: NodePort
  ports:
    - port: 80
      protocol: TCP
      nodePort: 30008
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpd-deploy
spec:
  minReadySeconds: 5
  replicas: 2
  selector:
    matchLabels:
      app: httpd
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: httpd
    spec:
      containers:
        - 
          name: httpd
          image: "httpd:2.4.25"

kubectl create namespace nautilus
kubectl -f apply httpd.yml --namespace=nautilus
kubectl set image deployment/httpd-deploy httpd=httpd:2.4.43 --namespace=nautilus --record=true
kubectl rollout undo deployment httpd-deploy -n nautilus
kubectl rollout status deployment httpd-deploy -n nautilus


## Create fron and backend applications
#BACK-END TIER
---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
spec:
  selector:
    app: redis-master
  ports:
    - port: 80
      protocol: TCP
      targetPort: 3679
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-master
  template:
    metadata:
      labels:
        app: redis-master
    spec:
      containers:
        - name: master-redis-datacenter
          image: redis
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
spec:
  selector:
    app: redis-slave
  ports:
    - port: 80
      protocol: TCP
      targetPort: 3679
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-slave
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis-slave
  template:
    metadata:
      labels:
        app: redis-slave
    spec:
      containers:
        - name: slave-redis-datacenter
          image: gcr.io/google_samples/gb-redisslave:v3
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
          env:
            - name: GET_HOSTS_FROM
              value: "dns"
#FRONT-END
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: NodePort
  selector:
    app: front-end
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
      nodePort: 30009
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: front-end
  template:
    metadata:
      labels:
        app: front-end
    spec:
      containers:
        - name: php-redis-datacenter
          image: gcr.io/google-samples/gb-frontend:v4
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
          env:
            - name: GET_HOSTS_FROM
              value: "dns"
