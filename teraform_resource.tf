resource "local_file" "whale" {
    filename = "/root/whale"
    depends_on = [local_file.krill]
}
resource "local_file" "krill" {
    filename = "/root/krill"


resource "random_pet" "my-pet" {

  length    = var.length 
}

output "pet-name" {
	
	value = random_pet.my-pet.id
	description = "Record the value of pet ID generated by the random_pet resource"
}

resource "local_file" "welcome" {
    filename = "/root/message.txt"
    content = "Welcome to Kodekloud."
}
output "welcome_message" {
	
	value = local_file.welcome.content

resource "local_file" "key_data" {
        filename       = "/tmp/.pki/private_key.pem"
        content = tls_private_key.private_key.private_key_pem
        file_permission =  "0400"
}
resource "tls_private_key" "private_key" {
  algorithm   = "RSA"
  rsa_bits  = 4096
}
resource "tls_cert_request" "csr" {
  key_algorithm   = "RSA"
  private_key_pem = file("/tmp/.pki/private_key.pem")
  depends_on = [ local_file.key_data ]

  subject {
    common_name  = "flexit.com"
    organization = "FlexIT Consulting Services"
  }
}

resource "local_file" "file" {
    filename = var.filename
    file_permission =  var.permission
    content = "This is a random string - ${random_string.string.id}"
    lifecycle {
        create_before_destroy = true
    }
resource "local_file" "name" {
    filename = var.users[count.index]
    sensitive_content = var.content
    count = length(var.users)
  
}
resource "aws_iam_user" "project-sonic" {
    name = split(":",var.cloud_users)[count.index]
    count = length(split(":",var.cloud_users))
  
}
resource "local_file" "name" {
    filename = each.value
    for_each = toset(var.users)
    sensitive_content = var.content
    }
}
##copy file from root to S3
resource "aws_s3_bucket_object" "upload" {
  bucket = "pixar-studios-2020"
  key    = "woody.jpg"
  source = "/root/woody.jpg"
}
resource "aws_iam_user" "cloud" {
     name = split(":",var.cloud_users)[count.index]
     count = length(split(":",var.cloud_users))

}
resource "aws_s3_bucket" "sonic_media" {
     bucket = var.bucket

}
resource "aws_s3_bucket_object" "upload_sonic_media" {
     bucket = aws_s3_bucket.sonic_media.id
     key =  substr(each.value, 7, 20)
     source = each.value
     for_each = var.media 

}
#----------------------------------------------------------
terraform {
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "1.2.2"
    }
  }
}

resource "local_file" "innovation" {
  filename = var.path
  content  = var.message



##terraform workspace and module

#resource in another project directory referencing module
provider "aws" {
  region                      = lookup(var.region, terraform.workspace)
  skip_credentials_validation = true
  skip_requesting_account_id  = true
  s3_force_path_style = true
  endpoints {
    ec2 = "http://aws:4566"
    dynamodb = "http://aws:4566"
    s3 = "http://aws:4566"
  }
}

module "payroll_app" {
  source = "/root/terraform-projects/modules/payroll-app"
  app_region = lookup(var.region, terraform.workspace)
  ami = lookup(var.ami, terraform.workspace)
}

#variables.tf
variable "region" {
    type = map
    default = {
        "us-payroll" = "us-east-1"
        "uk-payroll" = "eu-west-2"
        "india-payroll" = "ap-south-1"
    }

}
variable "ami" {
    type = map
    default = {
        "us-payroll" = "ami-24e140119877avm"
        "uk-payroll" = "ami-35e140119877avm"
        "india-payroll" = "ami-55140119877avm"
    }
}

#module (app_server.tf)
resource "aws_instance" "app_server" {
  ami = var.ami
  instance_type =  "t2.medium"
  tags = {
    Name = "${var.app_region}-app-server"
  }
  depends_on = [ aws_dynamodb_table.payroll_db,
                 aws_s3_bucket.payroll_data
               ]
}

#s3.tf in module workspace
resource "aws_s3_bucket" "payroll_data" {

  bucket = "${var.app_region}-${var.bucket}"

}
#dynamodb.tf in module workspace
#variables.tf
variable "region" {
    type = map
    default = {
        "us-payroll" = "us-east-1"
        "uk-payroll" = "eu-west-2"
        "india-payroll" = "ap-south-1"
    }

}
variable "ami" {
    type = map
    default = {
        "us-payroll" = "ami-24e140119877avm"
        "uk-payroll" = "ami-35e140119877avm"
        "india-payroll" = "ami-55140119877avm"
    }
}
###commands
terraform workspace
terraform output welcome_message
terraform refresh
terraform graph
yum install graphviz -y |dot -Tsvg > graph.svg   (displays graph of config)